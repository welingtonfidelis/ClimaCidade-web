{"version":3,"sources":["components/Load/index.js","services/api.js","services/util.js","pages/Main/index.js","routes.js","App.js","index.js"],"names":["Load","props","loading","Fade","in","style","transitionDelay","LinearProgress","color","api","axios","create","baseURL","date","Date","format","Main","api_url","process","REACT_APP_API_URL","useState","city","setCity","search","history","top","load","setLoad","weather","setWeather","setTop","setHistory","error","setError","useEffect","getHistory","getTop","listenSocket","a","user_id","uuid","socketio","query","on","response","reload","get","data","status","console","log","handleSubmit","event","preventDefault","id","onSubmit","TextField","autoComplete","fullWidth","required","label","variant","value","onChange","target","Button","type","className","util","updatedAt","country","src","icon","alt","tempNow","toFixed","tempMin","tempMax","feelsLike","humidity","windSpeed","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","el","index","key","_id","scope","name","count","Snackbar","anchorOrigin","vertical","horizontal","open","onClose","autoHideDuration","message","Routes","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e0a3c64.chunk.js","sourcesContent":["import React from 'react';\nimport { Fade, LinearProgress } from '@material-ui/core'\n\nexport default function Load(props) {\n  const { loading } = props;\n\n  return (\n    <Fade\n      in={loading}\n      style={{\n        transitionDelay: loading ? '10ms' : '10ms',\n      }}\n    >\n      <LinearProgress color=\"secondary\" />\n    </Fade>\n  )\n}\n\n","import axios from 'axios';\n\nconst api_url = 'https://clima-cidade-api.herokuapp.com/';\n\nconst api = axios.create({\n    baseURL: api_url\n})\n\nexport default api;","import { format } from 'date-fns';\n\nexport default {\n    dateTimeToString(date) {\n        date = date ? new Date(date) : new Date();\n        return format(date, 'dd/MM/yyyy HH:mm');\n    },\n}","import React, { useState, useEffect } from 'react';\nimport { Button, TextField } from \"@material-ui/core\"\nimport {\n    Snackbar, Paper, Table, TableHead, TableBody,\n    TableCell, TableContainer, TableRow\n} from '@material-ui/core';\nimport socketio from 'socket.io-client';\nimport { v4 as uuid } from 'uuid';\n\nimport Load from '../../components/Load';\n\nimport api from '../../services/api';\nimport util from '../../services/util';\n\nimport './styles.scss';\n\nexport default function Main() {\n    const api_url = process.env.REACT_APP_API_URL;\n\n    const [city, setCity] = useState('');\n    const [load, setLoad] = useState({ search: false, history: false, top: false });\n    const [weather, setWeather] = useState({});\n    const [top, setTop] = useState([]);\n    const [history, setHistory] = useState([]);\n    const [error, setError] = useState(false);\n\n    useEffect(() => {\n        getHistory();\n        getTop();\n        listenSocket();\n    }, []);\n\n    const listenSocket = async () => {\n        const user_id = uuid();\n\n        const socket = socketio(api_url, {\n            query: { user_id }\n        });\n\n        socket.on('reloadHistory', response => {\n            const { reload } = response;\n            if (reload) {\n                getHistory();\n                getTop();\n            }\n        });\n    }\n\n    const getHistory = async () => {\n        setLoad({ ...load, history: true });\n        try {\n            const query = await api.get(`/weather/history`);\n\n            const { status, response } = query.data;\n\n            if (status) setHistory(response);\n            else setError(true);\n\n        } catch (error) {\n            console.log(error);\n            setError(true);\n        }\n        setLoad({ ...load, history: false });\n    }\n\n    const getTop = async () => {\n        setLoad({ ...load, top: true });\n        try {\n            const query = await api.get(`/weather/top`);\n\n            const { status, response } = query.data;\n\n            if (status) setTop(response);\n            else setError(true);\n\n        } catch (error) {\n            console.log(error);\n            setError(true);\n        }\n        setLoad({ ...load, top: false });\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n\n        setLoad({ ...load, search: true });\n        try {\n            const query = await api.get(`/weather/${city}`);\n\n            const { status, response } = query.data;\n            if (status) setWeather(response);\n            else setError(true);\n\n        } catch (error) {\n            console.log(error);\n            setError(true);\n        }\n        setLoad({ ...load, search: false });\n    }\n\n    return (\n        <form id=\"content\" onSubmit={handleSubmit}>\n            <div id=\"content-left\">\n                <div id=\"left-card\">\n                    <Load loading={load.search} />\n\n                    <div id=\"search-card\">\n                        <TextField\n                            autoComplete=\"off\"\n                            fullWidth\n                            required\n                            label=\"Cidade\"\n                            variant=\"filled\"\n                            value={city}\n                            onChange={(event) => setCity(event.target.value)}\n                        />\n\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                            Buscar\n                        </Button>\n                    </div>\n\n                    {weather.city ?\n                        <div className=\"weather-container\">\n                            <span className=\"weather-date\">\n                                {util.dateTimeToString(weather.updatedAt)}\n                            </span>\n\n                            <span className=\"weather-city\">\n                                {weather.city} - {weather.country}\n                            </span>\n\n                            <span className=\"weather-text weather-icon\">\n                                <img id=\"wicon\" src={weather.icon} alt=\"Weather icon\" />\n                                {weather.weather}\n                            </span>\n\n                            <strong className=\"weather-temp\">\n                                {(weather.tempNow).toFixed(0)} ºC\n                            </strong>\n\n                            <div className=\"weather-temp-container\">\n                                <span className=\"weather-text\">\n                                    Mínima: {(weather.tempMin).toFixed(0)} ºC\n                                </span>\n\n                                <span className=\"weather-text\">\n                                    Máxima: {(weather.tempMax).toFixed(0)} ºC\n                                </span>\n                            </div>\n\n                            <span className=\"weather-text\">\n                                Sensação térmica: {(weather.feelsLike).toFixed(0)} ºC\n                            </span>\n\n                            <span className=\"weather-text\">\n                                Humidade do ar: {weather.humidity}%\n                            </span>\n\n                            <span className=\"weather-text\">\n                                Velocidade do vento: {weather.windSpeed} m/s\n                            </span>\n                        </div>\n                        : null}\n                </div>\n            </div>\n\n            <div id=\"content-right\">\n                <span className=\"table-title\">Cidades mais procuradas</span>\n                <Load loading={load.top} />\n\n                <TableContainer component={Paper}>\n                    <Table aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Posição</TableCell>\n                                <TableCell align=\"center\">Cidade</TableCell>\n                                <TableCell align=\"right\">Nº Buscas</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {top.map((el, index) => (\n                                <TableRow key={el._id}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {index + 1}\n                                    </TableCell>\n                                    <TableCell align=\"center\">{el.name}</TableCell>\n                                    <TableCell align=\"right\">{el.count}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <span className=\"table-title\">Buscadas recentes</span>\n                <Load loading={load.history} />\n\n                <TableContainer component={Paper} className=\"table-history\">\n                    <Table aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Nº</TableCell>\n                                <TableCell align=\"center\">Cidade</TableCell>\n                                <TableCell align=\"right\">Última pesquisa</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {history.map((el, index) => (\n                                <TableRow key={el._id}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {index + 1}\n                                    </TableCell>\n                                    <TableCell align=\"center\">{el.name}</TableCell>\n                                    <TableCell align=\"right\">\n                                        {util.dateTimeToString(el.updatedAt)}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n\n            <Snackbar\n                anchorOrigin={{ vertical: 'top', horizontal: 'left' }}\n                open={error}\n                onClose={() => setError(false)}\n                autoHideDuration={6000}\n                message=\"Houve um erro ao executar esta ação. Por favor, tente novamente.\"\n            />\n        </form>\n    )\n}","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport Main from './pages/Main';\n\nexport default function Routes() {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route path=\"/\" component={Main} />\n            </Switch>\n        </BrowserRouter>\n    )\n}","import React from 'react';\n\nimport Routes from './routes';\n\nimport './pages/global.scss'\nfunction App() {\n  return <Routes />\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}